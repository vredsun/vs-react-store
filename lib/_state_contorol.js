"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.map");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/esnext.map.delete-all");

require("core-js/modules/esnext.map.every");

require("core-js/modules/esnext.map.filter");

require("core-js/modules/esnext.map.find");

require("core-js/modules/esnext.map.find-key");

require("core-js/modules/esnext.map.includes");

require("core-js/modules/esnext.map.key-of");

require("core-js/modules/esnext.map.map-keys");

require("core-js/modules/esnext.map.map-values");

require("core-js/modules/esnext.map.merge");

require("core-js/modules/esnext.map.reduce");

require("core-js/modules/esnext.map.some");

require("core-js/modules/esnext.map.update");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initStore = exports.setDefaultValueToReducer = exports.removeSelectorToStack = exports.addSelectorToStack = exports.getSelectorValue = exports.compareOldValueWithNew = exports.setOfSelectors = void 0;

var _VsStoreContext = require("./VsStoreContext");

var _util = require("util");

var setOfSelectors = new Map();
exports.setOfSelectors = setOfSelectors;

var compareOldValueWithNew = function compareOldValueWithNew(state) {
  setOfSelectors.forEach(function (selectorState) {
    var newValue = selectorState.selector(state);

    if (newValue !== selectorState.currentValue) {
      selectorState.currentValue = newValue;
      selectorState.setValuesMap.forEach(function (setValue) {
        setValue(newValue);
      });
    }
  });
};

exports.compareOldValueWithNew = compareOldValueWithNew;

var getSelectorValue = function getSelectorValue(selector) {
  return selector(_VsStoreContext._store);
};

exports.getSelectorValue = getSelectorValue;

var addSelectorToStack = function addSelectorToStack(key, selector, currentValue, setValue) {
  if (!setOfSelectors.has(selector)) {
    var setValuesMap = new Map();
    setValuesMap.set(key, setValue);
    setOfSelectors.set(selector, {
      selector: selector,
      currentValue: currentValue,
      setValuesMap: setValuesMap
    });
  } else {
    setOfSelectors.get(selector).setValuesMap.set(key, setValue);
  }
};

exports.addSelectorToStack = addSelectorToStack;

var removeSelectorToStack = function removeSelectorToStack(key, selector) {
  if (setOfSelectors.has(selector)) {
    setOfSelectors.get(selector).setValuesMap.delete(key);

    if (!setOfSelectors.get(selector).setValuesMap.size) {
      setOfSelectors.delete(selector);
    }
  }
};

exports.removeSelectorToStack = removeSelectorToStack;
var default_value_key = Symbol('default_value_key');

var setDefaultValueToReducer = function setDefaultValueToReducer(reducer, default_value) {
  reducer[default_value_key] = default_value;
};

exports.setDefaultValueToReducer = setDefaultValueToReducer;

var initStore = function initStore(reducer) {
  var newState = reducer[default_value_key];
  Object.keys(newState).forEach(function (key) {
    if ((0, _util.isFunction)(newState[key])) {
      newState[key] = initStore(newState[key]);
    }
  });
  return newState;
};

exports.initStore = initStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92c19yZWFjdF9zdG9yZS9fc3RhdGVfY29udG9yb2wudHMiXSwibmFtZXMiOlsic2V0T2ZTZWxlY3RvcnMiLCJNYXAiLCJjb21wYXJlT2xkVmFsdWVXaXRoTmV3Iiwic3RhdGUiLCJmb3JFYWNoIiwic2VsZWN0b3JTdGF0ZSIsIm5ld1ZhbHVlIiwic2VsZWN0b3IiLCJjdXJyZW50VmFsdWUiLCJzZXRWYWx1ZXNNYXAiLCJzZXRWYWx1ZSIsImdldFNlbGVjdG9yVmFsdWUiLCJfc3RvcmUiLCJhZGRTZWxlY3RvclRvU3RhY2siLCJrZXkiLCJoYXMiLCJzZXQiLCJnZXQiLCJyZW1vdmVTZWxlY3RvclRvU3RhY2siLCJkZWxldGUiLCJzaXplIiwiZGVmYXVsdF92YWx1ZV9rZXkiLCJTeW1ib2wiLCJzZXREZWZhdWx0VmFsdWVUb1JlZHVjZXIiLCJyZWR1Y2VyIiwiZGVmYXVsdF92YWx1ZSIsImluaXRTdG9yZSIsIm5ld1N0YXRlIiwiT2JqZWN0Iiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFJTyxJQUFNQSxjQUFjLEdBQUcsSUFBSUMsR0FBSixFQUF2Qjs7O0FBU0EsSUFBTUMsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixDQUFnQ0MsS0FBaEMsRUFBNkM7QUFDakZILEVBQUFBLGNBQWMsQ0FBQ0ksT0FBZixDQUF1QixVQUFDQyxhQUFELEVBQW1CO0FBQ3hDLFFBQU1DLFFBQVEsR0FBR0QsYUFBYSxDQUFDRSxRQUFkLENBQXVCSixLQUF2QixDQUFqQjs7QUFFQSxRQUFJRyxRQUFRLEtBQUtELGFBQWEsQ0FBQ0csWUFBL0IsRUFBNkM7QUFDM0NILE1BQUFBLGFBQWEsQ0FBQ0csWUFBZCxHQUE2QkYsUUFBN0I7QUFDQUQsTUFBQUEsYUFBYSxDQUFDSSxZQUFkLENBQTJCTCxPQUEzQixDQUFtQyxVQUFDTSxRQUFELEVBQWM7QUFDL0NBLFFBQUFBLFFBQVEsQ0FBQ0osUUFBRCxDQUFSO0FBQ0QsT0FGRDtBQUdEO0FBQ0YsR0FURDtBQVVELENBWE07Ozs7QUFhQSxJQUFNSyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQStDSixRQUEvQyxFQUE0RTtBQUMxRyxTQUFPQSxRQUFRLENBQUNLLHNCQUFELENBQWY7QUFDRCxDQUZNOzs7O0FBSUEsSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUErQ0MsR0FBL0MsRUFBNERQLFFBQTVELEVBQXNGQyxZQUF0RixFQUF1R0UsUUFBdkcsRUFBZ0s7QUFDaE0sTUFBSSxDQUFDVixjQUFjLENBQUNlLEdBQWYsQ0FBbUJSLFFBQW5CLENBQUwsRUFBbUM7QUFDakMsUUFBTUUsWUFBWSxHQUFHLElBQUlSLEdBQUosRUFBckI7QUFDQVEsSUFBQUEsWUFBWSxDQUFDTyxHQUFiLENBQWlCRixHQUFqQixFQUFzQkosUUFBdEI7QUFFQVYsSUFBQUEsY0FBYyxDQUFDZ0IsR0FBZixDQUFtQlQsUUFBbkIsRUFBNkI7QUFDM0JBLE1BQUFBLFFBQVEsRUFBUkEsUUFEMkI7QUFFM0JDLE1BQUFBLFlBQVksRUFBWkEsWUFGMkI7QUFHM0JDLE1BQUFBLFlBQVksRUFBWkE7QUFIMkIsS0FBN0I7QUFLRCxHQVRELE1BU087QUFDTFQsSUFBQUEsY0FBYyxDQUFDaUIsR0FBZixDQUFtQlYsUUFBbkIsRUFBNkJFLFlBQTdCLENBQTBDTyxHQUExQyxDQUE4Q0YsR0FBOUMsRUFBbURKLFFBQW5EO0FBQ0Q7QUFDRixDQWJNOzs7O0FBZUEsSUFBTVEscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixDQUErQ0osR0FBL0MsRUFBNERQLFFBQTVELEVBQXlGO0FBQzVILE1BQUlQLGNBQWMsQ0FBQ2UsR0FBZixDQUFtQlIsUUFBbkIsQ0FBSixFQUFrQztBQUNoQ1AsSUFBQUEsY0FBYyxDQUFDaUIsR0FBZixDQUFtQlYsUUFBbkIsRUFBNkJFLFlBQTdCLENBQTBDVSxNQUExQyxDQUFpREwsR0FBakQ7O0FBQ0EsUUFBSSxDQUFDZCxjQUFjLENBQUNpQixHQUFmLENBQW1CVixRQUFuQixFQUE2QkUsWUFBN0IsQ0FBMENXLElBQS9DLEVBQXFEO0FBQ25EcEIsTUFBQUEsY0FBYyxDQUFDbUIsTUFBZixDQUFzQlosUUFBdEI7QUFDRDtBQUNGO0FBQ0YsQ0FQTTs7O0FBU1AsSUFBTWMsaUJBQWlCLEdBQUdDLE1BQU0sQ0FBQyxtQkFBRCxDQUFoQzs7QUFFTyxJQUFNQyx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQTJCLENBQUNDLE9BQUQsRUFBZUMsYUFBZixFQUFpQztBQUN2RUQsRUFBQUEsT0FBTyxDQUFDSCxpQkFBRCxDQUFQLEdBQTZCSSxhQUE3QjtBQUNELENBRk07Ozs7QUFHQSxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDRixPQUFELEVBQWtCO0FBQ3pDLE1BQU1HLFFBQVEsR0FBR0gsT0FBTyxDQUFDSCxpQkFBRCxDQUF4QjtBQUVBTyxFQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUYsUUFBWixFQUFzQnZCLE9BQXRCLENBQ0UsVUFBQ1UsR0FBRCxFQUFTO0FBQ1AsUUFBSSxzQkFBV2EsUUFBUSxDQUFDYixHQUFELENBQW5CLENBQUosRUFBK0I7QUFDN0JhLE1BQUFBLFFBQVEsQ0FBQ2IsR0FBRCxDQUFSLEdBQWdCWSxTQUFTLENBQUNDLFFBQVEsQ0FBQ2IsR0FBRCxDQUFULENBQXpCO0FBQ0Q7QUFDRixHQUxIO0FBUUEsU0FBT2EsUUFBUDtBQUNELENBWk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfc3RvcmUgfSBmcm9tICcuL1ZzU3RvcmVDb250ZXh0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICd1dGlsJztcblxudHlwZSBTZWxlY3RvcjxWIGV4dGVuZHMgYW55LCBTIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4gPSAoc3RvcmU6IFMpID0+IFY7XG5cbmV4cG9ydCBjb25zdCBzZXRPZlNlbGVjdG9ycyA9IG5ldyBNYXA8YW55LCB7XG4gIHNlbGVjdG9yOiBTZWxlY3RvcjxhbnksIHt9PjtcbiAgY3VycmVudFZhbHVlOiBhbnk7XG4gIHNldFZhbHVlc01hcDogTWFwPFxuICAgIFN5bWJvbCxcbiAgICAodmFsdWU6IFJldHVyblR5cGU8U2VsZWN0b3I8YW55LCB7fT4+KSA9PiBhbnlcbiAgPjtcbn0+KCk7XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlT2xkVmFsdWVXaXRoTmV3ID0gPFMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihzdGF0ZTogUykgPT4ge1xuICBzZXRPZlNlbGVjdG9ycy5mb3JFYWNoKChzZWxlY3RvclN0YXRlKSA9PiB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBzZWxlY3RvclN0YXRlLnNlbGVjdG9yKHN0YXRlKTtcblxuICAgIGlmIChuZXdWYWx1ZSAhPT0gc2VsZWN0b3JTdGF0ZS5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHNlbGVjdG9yU3RhdGUuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBzZWxlY3RvclN0YXRlLnNldFZhbHVlc01hcC5mb3JFYWNoKChzZXRWYWx1ZSkgPT4ge1xuICAgICAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdG9yVmFsdWUgPSA8ViBleHRlbmRzIGFueSwgUyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KHNlbGVjdG9yOiBTZWxlY3RvcjxWLCBTPikgPT4ge1xuICByZXR1cm4gc2VsZWN0b3IoX3N0b3JlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRTZWxlY3RvclRvU3RhY2sgPSA8ViBleHRlbmRzIGFueSwgUyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KGtleTogU3ltYm9sLCBzZWxlY3RvcjogU2VsZWN0b3I8ViwgUz4sIGN1cnJlbnRWYWx1ZTogViwgc2V0VmFsdWU6ICh2YWx1ZTogUmV0dXJuVHlwZTxTZWxlY3RvcjxWLCBTPj4pID0+IGFueSkgPT4ge1xuICBpZiAoIXNldE9mU2VsZWN0b3JzLmhhcyhzZWxlY3RvcikpIHtcbiAgICBjb25zdCBzZXRWYWx1ZXNNYXAgPSBuZXcgTWFwKCk7XG4gICAgc2V0VmFsdWVzTWFwLnNldChrZXksIHNldFZhbHVlKTtcblxuICAgIHNldE9mU2VsZWN0b3JzLnNldChzZWxlY3Rvciwge1xuICAgICAgc2VsZWN0b3IsXG4gICAgICBjdXJyZW50VmFsdWUsXG4gICAgICBzZXRWYWx1ZXNNYXAsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0T2ZTZWxlY3RvcnMuZ2V0KHNlbGVjdG9yKS5zZXRWYWx1ZXNNYXAuc2V0KGtleSwgc2V0VmFsdWUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlU2VsZWN0b3JUb1N0YWNrID0gPFYgZXh0ZW5kcyBhbnksIFMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihrZXk6IFN5bWJvbCwgc2VsZWN0b3I6IFNlbGVjdG9yPFYsIFM+KSA9PiB7XG4gIGlmIChzZXRPZlNlbGVjdG9ycy5oYXMoc2VsZWN0b3IpKSB7XG4gICAgc2V0T2ZTZWxlY3RvcnMuZ2V0KHNlbGVjdG9yKS5zZXRWYWx1ZXNNYXAuZGVsZXRlKGtleSk7XG4gICAgaWYgKCFzZXRPZlNlbGVjdG9ycy5nZXQoc2VsZWN0b3IpLnNldFZhbHVlc01hcC5zaXplKSB7XG4gICAgICBzZXRPZlNlbGVjdG9ycy5kZWxldGUoc2VsZWN0b3IpO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgZGVmYXVsdF92YWx1ZV9rZXkgPSBTeW1ib2woJ2RlZmF1bHRfdmFsdWVfa2V5Jyk7XG5cbmV4cG9ydCBjb25zdCBzZXREZWZhdWx0VmFsdWVUb1JlZHVjZXIgPSAocmVkdWNlcjogYW55LCBkZWZhdWx0X3ZhbHVlKSA9PiB7XG4gIHJlZHVjZXJbZGVmYXVsdF92YWx1ZV9rZXldID0gZGVmYXVsdF92YWx1ZTtcbn07XG5leHBvcnQgY29uc3QgaW5pdFN0b3JlID0gKHJlZHVjZXI6IGFueSkgPT4ge1xuICBjb25zdCBuZXdTdGF0ZSA9IHJlZHVjZXJbZGVmYXVsdF92YWx1ZV9rZXldO1xuXG4gIE9iamVjdC5rZXlzKG5ld1N0YXRlKS5mb3JFYWNoKFxuICAgIChrZXkpID0+IHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKG5ld1N0YXRlW2tleV0pKSB7XG4gICAgICAgIG5ld1N0YXRlW2tleV0gPSBpbml0U3RvcmUobmV3U3RhdGVba2V5XSk7XG4gICAgICB9XG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4gbmV3U3RhdGU7XG59O1xuIl19